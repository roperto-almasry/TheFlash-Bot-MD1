const reminders = {};

const handler = async (m, { conn, command, args }) => {
    const chatId = m.chat;
    const userId = m.sender;

    if (command === 'ØªØ°ÙƒÙŠØ±') {
        const reminderArgs = args.join(' ').split('|');
        const reminderText = reminderArgs[0]?.trim();
        const reminderTime = reminderArgs[1]?.trim();

        if (!reminderText || !reminderTime) {
            return await conn.reply(chatId, "ÙŠØ±Ø¬Ù‰ ØªØ­Ø¯ÙŠØ¯ Ù†Øµ Ø§Ù„ØªØ°ÙƒÙŠØ± ÙˆØ§Ù„ÙˆÙ‚Øª. Ù…Ø«Ø§Ù„: .ØªØ°ÙƒÙŠØ± Ø§Ø´Ø±Ø¨ Ù…Ø§Ø¡ | 30 Ø¯Ù‚ÙŠÙ‚Ø©", m);
        }

        const reminderId = `${chatId}-${Date.now()}`;
        const timeInMilliseconds = convertTimeToMilliseconds(reminderTime); // ØªØ­ÙˆÙŠÙ„ Ø§Ù„ÙˆÙ‚Øª Ø¥Ù„Ù‰ Ù…Ù„ÙŠ Ø«Ø§Ù†ÙŠØ©

        if (!timeInMilliseconds) {
            return await conn.reply(chatId, "ÙŠØ±Ø¬Ù‰ ØªØ­Ø¯ÙŠØ¯ ÙˆÙ‚Øª ØµØ­ÙŠØ­ (Ù…Ø«Ù„: 30 Ø¯Ù‚ÙŠÙ‚Ø© Ø£Ùˆ 2 Ø³Ø§Ø¹Ø©)", m);
        }

        reminders[reminderId] = {
            chatId,
            userId,
            text: reminderText,
            time: Date.now() + timeInMilliseconds
        };

        await conn.reply(chatId, `âœ… ØªÙ… Ø¶Ø¨Ø· Ø§Ù„ØªØ°ÙƒÙŠØ±: "${reminderText}" Ø¨Ø¹Ø¯ ${reminderTime}.`, m);

        setTimeout(async () => {
            const reminder = reminders[reminderId];
            if (reminder) {
                await conn.sendMessage(reminder.chatId, { text: `ðŸ”” ØªØ°ÙƒÙŠØ±: ${reminder.text}` }, { quoted: m });
                delete reminders[reminderId];
            }
        }, timeInMilliseconds);
    }
};

function convertTimeToMilliseconds(timeString) {
    const timeParts = timeString.match(/(\d+)\s*(Ø¯Ù‚ÙŠÙ‚Ø©|Ø³Ø§Ø¹Ø©)/);
    if (!timeParts) return null;

    const value = parseInt(timeParts[1], 10);
    const unit = timeParts[2];

    return unit === 'Ø¯Ù‚ÙŠÙ‚Ø©' ? value * 60000 : unit === 'Ø³Ø§Ø¹Ø©' ? value * 3600000 : null;
}

handler.help = ['ØªØ°ÙƒÙŠØ± [Ø§Ù„Ù†Øµ] | [Ø§Ù„ÙˆÙ‚Øª]'];
handler.tags = ['tools'];
handler.command = /^(ØªØ°ÙƒÙŠØ±)$/i;

export default handler;
